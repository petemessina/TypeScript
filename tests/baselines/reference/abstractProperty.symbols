=== tests/cases/compiler/abstractProperty.ts ===
interface A {
>A : Symbol(A, Decl(abstractProperty.ts, 0, 0))

    prop: string;
>prop : Symbol(prop, Decl(abstractProperty.ts, 0, 13))

    raw: string;
>raw : Symbol(raw, Decl(abstractProperty.ts, 1, 17))

    m(): void;
>m : Symbol(m, Decl(abstractProperty.ts, 2, 16))
}
abstract class B implements A {
>B : Symbol(B, Decl(abstractProperty.ts, 4, 1))
>A : Symbol(A, Decl(abstractProperty.ts, 0, 0))

    abstract prop: string;
>prop : Symbol(prop, Decl(abstractProperty.ts, 5, 31))

    abstract raw: string;
>raw : Symbol(raw, Decl(abstractProperty.ts, 6, 26))

    abstract readonly ro: string;
>ro : Symbol(ro, Decl(abstractProperty.ts, 7, 25))

    abstract get readonlyProp(): string;
>readonlyProp : Symbol(readonlyProp, Decl(abstractProperty.ts, 8, 33), Decl(abstractProperty.ts, 9, 40))

    abstract set readonlyProp(val: string);
>readonlyProp : Symbol(readonlyProp, Decl(abstractProperty.ts, 8, 33), Decl(abstractProperty.ts, 9, 40))
>val : Symbol(val, Decl(abstractProperty.ts, 10, 30))

    abstract m(): void;
>m : Symbol(m, Decl(abstractProperty.ts, 10, 43))
}
class C extends B {
>C : Symbol(C, Decl(abstractProperty.ts, 12, 1))
>B : Symbol(B, Decl(abstractProperty.ts, 4, 1))

    get prop() { return "foo"; }
>prop : Symbol(prop, Decl(abstractProperty.ts, 13, 19), Decl(abstractProperty.ts, 14, 32))

    set prop(v) { }
>prop : Symbol(prop, Decl(abstractProperty.ts, 13, 19), Decl(abstractProperty.ts, 14, 32))
>v : Symbol(v, Decl(abstractProperty.ts, 15, 13))

    raw = "edge";
>raw : Symbol(raw, Decl(abstractProperty.ts, 15, 19))

    readonly ro = "readonly please";
>ro : Symbol(ro, Decl(abstractProperty.ts, 16, 17))

    readonlyProp: string; // don't have to give a value, in fact
>readonlyProp : Symbol(readonlyProp, Decl(abstractProperty.ts, 17, 36))

    m() { }
>m : Symbol(m, Decl(abstractProperty.ts, 18, 25))
}

abstract class AbstractAccessorMismatch {
>AbstractAccessorMismatch : Symbol(AbstractAccessorMismatch, Decl(abstractProperty.ts, 20, 1))

    abstract get p1(): string;
>p1 : Symbol(p1, Decl(abstractProperty.ts, 22, 41), Decl(abstractProperty.ts, 23, 30))

    set p1(val: string) { };
>p1 : Symbol(p1, Decl(abstractProperty.ts, 22, 41), Decl(abstractProperty.ts, 23, 30))
>val : Symbol(val, Decl(abstractProperty.ts, 24, 11))

    get p2(): string { return "should work"; }
>p2 : Symbol(p2, Decl(abstractProperty.ts, 24, 28), Decl(abstractProperty.ts, 25, 46))

    abstract set p2(val: string);
>p2 : Symbol(p2, Decl(abstractProperty.ts, 24, 28), Decl(abstractProperty.ts, 25, 46))
>val : Symbol(val, Decl(abstractProperty.ts, 26, 20))
}
class AbstractAccessorMismatchImpl extends AbstractAccessorMismatch {
>AbstractAccessorMismatchImpl : Symbol(AbstractAccessorMismatchImpl, Decl(abstractProperty.ts, 27, 1))
>AbstractAccessorMismatch : Symbol(AbstractAccessorMismatch, Decl(abstractProperty.ts, 20, 1))

    get p1(): string { return "impl"; }
>p1 : Symbol(p1, Decl(abstractProperty.ts, 28, 69))

    set p2(val: string) { }
>p2 : Symbol(p2, Decl(abstractProperty.ts, 29, 39))
>val : Symbol(val, Decl(abstractProperty.ts, 30, 11))
}
